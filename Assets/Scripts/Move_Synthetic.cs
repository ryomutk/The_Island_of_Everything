// Script generated by the audio exporter from Tsugi
// www.tsugi-studio.com
using UnityEngine;
using System.Collections;

public class Move_Synthetic : MonoBehaviour
{
    public enum PlayingMode
    {
        Sequential,
        Shuffle,
        FullRandom,
    }

    public PlayingMode playingMode = PlayingMode.Shuffle;
    [Range(0,1)]
    public float minVolume = 0.0f;
    [Range(0,1)]
    public float maxVolume = 1.0f;
    [Range(0,2)]
    public float maxPitchVariation = 1.0f;

    private AudioClip[] audioClips = null;
    private int lastIndex = -1;

    void Start () 
    {
        audioClips = new AudioClip[1];
        audioClips[0] = Resources.Load<AudioClip>("DoorOpen");
    }

    public void PlaySFX()
    {
        switch (playingMode)
        {
            case PlayingMode.Sequential:
                lastIndex++;
                if (lastIndex == audioClips.Length)
                    lastIndex = 0;
                break;
            case PlayingMode.Shuffle:
                int newIndex = lastIndex;
                while (lastIndex == (newIndex = Random.Range(0, audioClips.Length))) { }
                lastIndex = newIndex;
                break;
            case PlayingMode.FullRandom:
                lastIndex = Random.Range(0, audioClips.Length);
                break;
        }

        AudioSource audioSource = (AudioSource)gameObject.AddComponent<AudioSource>();
        audioSource.pitch = (float)Mathf.Pow(2.0f, maxPitchVariation * (2.0f * Random.value - 1.0f));
        audioSource.volume = minVolume + (maxVolume - minVolume) * Random.value;
        audioSource.loop = false;
        audioSource.spatialBlend = 1.0f;
        audioSource.clip = audioClips[lastIndex];
        audioSource.Play();
        if(audioSource.loop == false)
            Destroy(audioSource, audioClips[lastIndex].length);
    }

    void StopLoops()
    {
        AudioSource[] audioSources = gameObject.GetComponents<AudioSource>();
        foreach(AudioSource source in audioSources)
            Destroy(source);
    }

}
